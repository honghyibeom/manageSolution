<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.managesolution.mapper.PtPackageMapper">

<!--    pt를 등록한 회원 조회-->
    <select id="getAllCareMembers" resultType="PtCareDTO">
        SELECT
            m.name AS memberName,
            m.phone AS memberPhone,
            1 As count,
            pp.totalCount,
            ps.sessionDate,
            ps.sessionTime
        FROM pt_package pp
                INNER JOIN member m
                        ON pp.memberId = m.memberId
                INNER JOIN pt_session ps
                        ON pp.packageId = ps.packageId
                LEFT OUTER JOIN attendance a
                        ON ps.sessionId = a.sessionId
        WHERE a.attendanceId IS NULL
        AND   pp.isActive = TRUE
        AND  ps.sessionDate = (
            SELECT MIN(ps2.sessionDate)
            FROM pt_session ps2
                     LEFT JOIN attendance a2
                               ON ps2.sessionId = a2.sessionId
            WHERE ps2.packageId = pp.packageId
              AND a2.attendanceId IS NULL
            )
        ORDER BY ps.sessionDate ASC, ps.sessionTime ASC;
    </select>

    <insert id="savePtPackage" parameterType="PtPackage">
        INSERT INTO pt_package (memberId, trainerId, productId, totalCount, remainingCount,startDate, endDate, price, created_at, isActive)
        VALUES (#{memberId}, #{trainerId}, #{productId}, #{totalCount}, #{remainingCount}, #{startDate}, #{endDate}, #{price}, #{createdAt}, #{isActive})
    </insert>

    <update id="deleteUnpaidPtPackages" parameterType="long">
        UPDATE pt_package
        SET isActive = false
        WHERE memberId = #{memberId}
          AND isActive = true
          AND paymentId IS NULL
    </update>

    <update id="activateByMemberId" parameterType="long">
        UPDATE pt_package
        SET isActive = true
        WHERE memberId = #{memberId}
          AND isActive = false
    </update>


    <update id="updatePtPackage" parameterType="PtPackage">
        UPDATE pt_package
        SET trainerId       = #{trainerId},
            productId       = #{productId},
            startDate       = #{startDate},
            endDate         = #{endDate},
            totalCount      = #{totalCount},
            remainingCount  = #{remainingCount},
            price           = #{price}
        WHERE memberId = #{memberId}
    </update>

    <!--   care 회원 이름 검색-->
    <select id="findByNameContaining" resultType="PtCareDTO">
        SELECT
            m.name AS memberName,
            m.phone AS memberPhone,
            1 As count,
            pp.totalCount,
            ps.sessionDate,
            ps.sessionTime
        FROM pt_package pp
                 INNER JOIN member m
                            ON pp.memberId = m.memberId
                 INNER JOIN pt_session ps
                            ON pp.packageId = ps.packageId
                 LEFT OUTER JOIN attendance a
                                 ON ps.sessionId = a.sessionId
        WHERE a.attendanceId IS NULL
          AND   pp.isActive = TRUE
          AND  ps.sessionDate = (
            SELECT MIN(ps2.sessionDate)
            FROM pt_session ps2
                     LEFT JOIN attendance a2
                               ON ps2.sessionId = a2.sessionId
            WHERE ps2.packageId = pp.packageId
              AND a2.attendanceId IS NULL
            )
          AND m.name LIKE CONCAT(#{keyword}, '%')
        ORDER BY ps.sessionDate ASC, ps.sessionTime ASC;
    </select>

    <!-- care 회원 폰 번호 검색-->
    <select id="findByPhoneContaining" resultType="PtCareDTO">
        SELECT
            m.name AS memberName,
            m.phone AS memberPhone,
            1 As count,
            pp.totalCount,
            ps.sessionDate,
            ps.sessionTime
        FROM pt_package pp
                INNER JOIN member m
                        ON pp.memberId = m.memberId
                INNER JOIN pt_session ps
                        ON pp.packageId = ps.packageId
                LEFT OUTER JOIN attendance a
                        ON ps.sessionId = a.sessionId
        WHERE a.attendanceId IS NULL
        AND   pp.isActive = TRUE
        AND  ps.sessionDate = (
            SELECT MIN(ps2.sessionDate)
            FROM pt_session ps2
                     LEFT JOIN attendance a2
                               ON ps2.sessionId = a2.sessionId
            WHERE ps2.packageId = pp.packageId
              AND a2.attendanceId IS NULL
            )
        AND m.phone LIKE CONCAT(#{keyword}, '%')
        ORDER BY ps.sessionDate ASC, ps.sessionTime ASC;
    </select>

    <select id="findByTrainerId" parameterType="long" resultType="PtMemberDTO">
        SELECT
            p.memberId,
            m.name,
            m.phone,
            m.birthDate,
            p.totalCount,
            p.remainingCount,
            p.startDate,
            p.endDate
        FROM pt_package p
                 INNER JOIN member m
                            ON p.memberId = m.memberId
        WHERE p.trainerId = #{trainerId}
        ORDER BY m.name
    </select>

<!--    한 회원의 PtPackage 조회-->
    <select id="findPackageIdByMemberId" parameterType="long" resultType="long">
        SELECT top 1 packageId
        FROM pt_package
        WHERE memberId = #{memberId}
    </select>

    <update id="updateTrainerByMemberId">
        UPDATE pt_package
        SET trainerId = #{trainerId}
        WHERE memberId = #{memberId}
    </update>

    <update id="increaseRemainingCount">
        UPDATE pt_package
        SET remainingCount = remainingCount + 1
        WHERE packageId = #{packageId}
          AND remainingCount &lt; totalCount
    </update>

    <select id="findByMemberId" parameterType="long" resultType="PtPackage">
        SELECT top 1 memberId, trainerId, productId, totalCount, remainingCount, startDate, endDate, price
        FROM pt_package
        WHERE memberId = #{memberId}
        ORDER BY endDate DESC
    </select>

    <update id="updatePaymentId">
        UPDATE pt_package
        SET paymentId = #{paymentId}
        WHERE memberId = #{memberId} AND paymentId IS NULL
    </update>

    <select id="selectPtMembers" resultType="PtMemberSalesDTO">
        SELECT
            p.name AS productName,
            COUNT(*) AS count,
            pp.price AS unitPrice,
            SUM(pp.price) AS totalAmount
        FROM pt_package pp
                 JOIN product p
                      ON pp.productId = p.productId
        WHERE pp.startDate BETWEEN #{startDate} AND #{endDate}
        GROUP BY p.name, pp.price
        ORDER BY p.name
    </select>

    <delete id="deletePtPackagesByMemberId">
        DELETE FROM pt_package
        WHERE memberId = #{memberId}
          AND isActive = FALSE
    </delete>
</mapper>
