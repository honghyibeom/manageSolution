<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.managesolution.mapper.PtSessionMapper">
    <select id="getSessionCountByMonth" parameterType="map" resultType="DayLessonDTO">
        SELECT
            DAY_OF_MONTH(sessionDate) AS "day",
            COUNT(*) AS lessonCount
        FROM pt_session
        WHERE sessionDate BETWEEN #{startDate} AND #{endDate}
        GROUP BY DAY_OF_MONTH(sessionDate)
    </select>

    <select id="getSessionCountByMonthAndTrainer" resultType="DayLessonDTO">
        SELECT
            DAY_OF_MONTH(sessionDate) AS "day",
            COUNT(*) AS lessonCount
        FROM pt_session
        WHERE sessionDate BETWEEN #{startDate} AND #{endDate}
        AND trainerId = #{trainerId}
        GROUP BY DAY_OF_MONTH(sessionDate)
    </select>

    <select id="selectLessonsByDate" parameterType="date" resultType="LessonDTO">
        SELECT
            s.sessionId AS sessionId,
            s.memberId AS memberId,
            s.packageId,
            m.name AS memberName,
            u.name AS trainerName,
            s.sessionDate,
            s.sessionTime,
            EXISTS (
                SELECT 1 FROM attendance a
                WHERE a.sessionId = s.sessionId
                  AND a.memberId = s.memberId
            ) AS attended,
            (select a.status from attendance a
                where a.sessionId = s.sessionId
                  AND a.memberId = s.memberId
            ) AS status
        FROM pt_session s
                 JOIN member m ON s.memberId = m.memberId
                 JOIN app_user u ON s.trainerId = u.userId
        WHERE s.sessionDate = #{sessionDate}
        ORDER BY s.sessionTime ASC
    </select>

    <select id="selectLessonsByDateAndTrainer" parameterType="map" resultType="LessonDTO">
        SELECT
            s.sessionId AS sessionId,
            s.memberId AS memberId,
            s.packageId,
            m.name AS memberName,
            u.name AS trainerName,
            s.sessionDate,
            s.sessionTime,
            EXISTS (
                SELECT 1 FROM attendance a
                WHERE a.sessionId = s.sessionId
                  AND a.memberId = s.memberId
            ) AS attended,
            (select a.status from attendance a
             where a.sessionId = s.sessionId
               AND a.memberId = s.memberId
                ) AS status
        FROM pt_session s
                 JOIN member m ON s.memberId = m.memberId
                 JOIN app_user u ON s.trainerId = u.userId
        WHERE s.sessionDate = #{sessionDate}
          AND s.trainerId = #{trainerId}
        ORDER BY s.sessionTime ASC
    </select>

    <insert id="insert" parameterType="PtSession" useGeneratedKeys="true" keyProperty="ptSessionId">
        INSERT INTO pt_session (memberId, trainerId, packageId, sessionDate, sessionTime, batchId)
        VALUES ( #{memberId}, #{trainerId},#{packageId}, #{sessionDate}, #{sessionTime}, #{batchId} )
    </insert>

    <delete id="deleteById" parameterType="long">
        DELETE FROM pt_session WHERE sessionId = #{id}
    </delete>

    <select id="findTodaySessions" resultType="DashboardSessionDTO">
        SELECT
            au.name as trainerName,
            m.name as memberName,
            ps.sessionTime as sessionTime
        FROM pt_session ps
                LEFT OUTER JOIN app_user au
                             ON ps.trainerId = au.userId
                LEFT OUTER JOIN member m
                             ON ps.memberId = m.memberId
        WHERE CURRENT_DATE = sessionDate
    </select>

    <select id="findBusySlots" resultType="BusySlotDTO">
        SELECT
            sessionDate,
            sessionTime
        FROM pt_session
        WHERE trainerId = #{trainerId}
          AND sessionDate BETWEEN #{start} AND #{end}
        ORDER BY sessionDate, sessionTime
    </select>

    <select id="existsTrainerExact" resultType="int">
        SELECT CASE WHEN EXISTS (
            SELECT 1
            FROM pt_session
            WHERE trainerId = #{trainerId}
              AND sessionDate = #{date}
              AND sessionTime = #{time}
        ) THEN 1 ELSE 0 END
    </select>

    <select id="existsMemberExact" resultType="int">
        SELECT CASE WHEN EXISTS (
            SELECT 1
            FROM pt_session
              WHERE memberId  = #{memberId}
              AND sessionDate = #{date}
              AND sessionTime = #{time}
        ) THEN 1 ELSE 0 END
    </select>

    <select id="ptSessionViews" resultType="SessionViewDTO">
        SELECT
        s.sessionId AS sessionId,
        m.memberId AS memberId,
        pp.packageId AS packageId,
        t.trainerId AS trainerId,
        s.batchId AS batchId,

        -- 임박 여부: 현재 시각 기준 30분 이내 시작이면 true
        CASE
        WHEN TIMESTAMPDIFF(
        MINUTE,
        NOW(),
        CAST(CONCAT(s.sessionDate, ' ', s.sessionTime) AS DATETIME)
        ) BETWEEN 0 AND 30
        THEN TRUE
        ELSE FALSE
        END AS imminent,
        m.name AS memberName,
        RIGHT(m.phone, 4) AS phone,
        a.name AS trainerName,
        p.name AS productName,
        pp.remainingCount AS remainingCount,

        -- 상태 색상
        CASE s.status
        WHEN 'BOOKED'   THEN '#6c757d'
        WHEN 'ATTENDED' THEN '#198754'
        WHEN 'NO_SHOW'  THEN '#ffc107'
        ELSE '#6c757d'
        END AS statusColor,

        -- 상태 라벨
        CASE s.status
        WHEN 'BOOKED'   THEN '예약'
        WHEN 'ATTENDED' THEN '출석'
        WHEN 'NO_SHOW'  THEN '결석'
        ELSE s.status
        END AS label,

        s.sessionTime AS sessionTime,
        s.sessionDate AS sessionDate

        FROM pt_session s
        JOIN member m   ON s.memberId = m.memberId
        JOIN trainer t  ON s.trainerId = t.trainerId
                LEFT JOIN app_user a ON t.trainerId = a.userId
        LEFT JOIN pt_package pp ON s.packageId = pp.packageId
                LEFT JOIN product p  ON pp.productId = p.productId

        WHERE 1=1
        <!-- 날짜 범위 필터 -->
        <if test="cond.startDate != null">
            AND s.sessionDate &gt;= #{cond.startDate}
        </if>
        <if test="cond.endDate != null">
            AND s.sessionDate &lt;= #{cond.endDate}
        </if>

        <!-- 트레이너 필터 -->
        <if test="cond.trainerId != null">
            AND s.trainerId = #{cond.trainerId}
        </if>

        <!-- 상태 필터 -->
        <if test="cond.status != null and cond.status.size > 0">
            AND s.status IN
            <foreach collection="cond.status" item="st" open="(" separator="," close=")">
                #{st}
            </foreach>
        </if>

        ORDER BY s.sessionDate ASC, s.sessionTime ASC
        <!-- MySQL -->
        <!-- LIMIT #{offset}, #{limit} -->
        <!-- H2 -->
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <update id="updateStatus">
        UPDATE pt_session
        SET status = #{status}
        WHERE sessionId = #{id}
    </update>

    <select id="getStatus" parameterType="long" resultType="String">
        SELECT status
        FROM pt_session
        WHERE sessionId = #{sessionId}
    </select>
    <update id="updateSession">
        UPDATE pt_session
        SET sessionDate = #{sessionDate},
            sessionTime = #{sessionTime},
            trainerId   = #{trainerId}
        WHERE sessionId = #{sessionId}
    </update>

    <delete id="deleteByBatchId" parameterType="String" >
        DELETE
        FROM pt_session
        WHERE batchId = #{batchId}
    </delete>

    <select id="findSessionIdByBatchId" parameterType="String" resultType="PtSession">
        SELECT *
        FROM pt_session
        WHERE batchId = #{batchId}
    </select>

    <select id="findSessionViewByBatchId" parameterType="String" resultType="SessionGroupDTO">
        SELECT s.sessionDate AS sessionDate,
               s.sessionTime AS sessionTime,
               m.name        AS memberName,
               a.name        AS trainerName,
               p.name        AS productName
        FROM pt_session s
                 JOIN member m ON s.memberId = m.memberId
                 JOIN trainer t ON s.trainerId = t.trainerId
                        LEFT JOIN app_user a ON t.trainerId = a.userId
                 LEFT JOIN pt_package pp ON s.packageId = pp.packageId
                        LEFT JOIN product p ON pp.productId = p.productId
        WHERE batchId = #{batchId}
        ORDER BY s.sessionDate
    </select>

</mapper>
