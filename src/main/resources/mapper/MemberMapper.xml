<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.managesolution.mapper.MemberMapper">
<!--    ÌöåÏõê Ï†ÑÏ≤¥ Ï°∞Ìöå-->
    <select id="findMembers" resultType="MemberProductDTO">
        SELECT
        m.memberId,
        m.name,
        m.phone,
        m.birthDate,
        m.gender,
        m.status,
        p.name AS productName,
        m.created_at AS createdAt
        FROM member m
        LEFT JOIN subscription s
        ON m.memberId = s.memberId
         AND s.isActive = TRUE   -- ÌôúÏÑ±ÌôîÎêú Ïù¥Ïö©Í∂åÎßå
        LEFT JOIN product p
        ON s.productId = p.productId
        <where>
            <if test="status != null and status != ''">
                AND m.status = #{status}
            </if>
            <if test="keyword != null and keyword != ''">
                <choose>
                    <when test="isNumeric">
                        AND m.phone LIKE CONCAT('%', #{keyword}, '%')
                    </when>
                    <otherwise>
                        AND m.name LIKE CONCAT('%', #{keyword}, '%')
                    </otherwise>
                </choose>
            </if>
        </where>
        ORDER BY m.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="countAll" resultType="int">
        SELECT COUNT(*) FROM member
    </select>

    <!--    ID ÌïúÍ±¥ Ï°∞Ìöå-->
    <select id="findById" parameterType="long" resultType="Member">
        SELECT memberId, name, phone, birthDate, gender, status, memo, created_at as createdAt
        FROM member
        WHERE memberId = #{memberId}
    </select>

    <select id="findFormById" parameterType="long" resultType="MemberFormDTO">
        SELECT
            m.memberId,
            m.name,
            m.phone,
            m.birthDate,
            m.gender,
            m.status,
            m.memo,
            m.created_at AS createdAt,

            s.productType,
            s.productId,
            s.startDate,
            s.endDate,
            s.price,
            s.trainerId,
            s.totalCount,
            s.remainingCount
        FROM member m
                 LEFT JOIN (
            SELECT sub.*
            FROM subscription sub
            WHERE sub.memberId = #{memberId}
            AND sub.isActive = true
            ORDER BY sub.endDate DESC
            LIMIT 1
        ) s ON s.memberId = m.memberId
        WHERE m.memberId = #{memberId}
    </select>

<!--    ÌöåÏõê Îì±Î°ù useGeneratedKeyÎäî ÌÇ§ ÏûêÎèô ÏÉùÏÑ±-->
    <insert id="insert" parameterType="Member" useGeneratedKeys="true" keyProperty="memberId">
        INSERT INTO member (name, phone, birthDate, gender, status, memo, created_at)
        VALUES (#{name}, #{phone}, #{birthDate}, #{gender}, #{status}, #{memo}, NOW())
    </insert>

<!--    ÌöåÏõê ÏàòÏ†ï-->
    <update id="update" parameterType="Member">
        UPDATE member
        SET name        = #{name},
            phone       = #{phone},
            birthDate   = #{birthDate},
            gender      = #{gender},
            status      = #{status},
            memo        = #{memo}
        WHERE memberId  = #{memberId}
    </update>

    <!-- ÌöåÏõê ÏÇ≠Ï†ú -->
    <delete id="delete" parameterType="long">
        DELETE FROM member WHERE memberId = #{memberId}
    </delete>

    <select id="findUnpaidMembers" resultType="MemberUnpaidDTO">
        SELECT
        m.memberId,
        s.subscriptionId,
        m.name AS memberName,
        m.phone,
        p.name AS productName,
        p.type AS productType,
        s.price AS amount,
        p.productId
        FROM member m
        JOIN subscription s ON s.memberId = m.memberId
        JOIN product p ON s.productId = p.productId
        WHERE s.paymentId IS NULL
        <if test="keyword != null and keyword != ''">
            AND m.name LIKE CONCAT('%', #{keyword}, '%')
        </if>
        <if test="startDate != null">
            AND s.startDate &gt;= #{startDate}
        </if>
        <if test="endDate != null">
            AND s.startDate &lt;= #{endDate}
        </if>
        ORDER BY m.name
    </select>


    <select id="findExpiredMembers" resultType="MemberExpiredDTO">
        SELECT
        m.memberId,
        latest.endDate AS expiredDate,
        m.name AS memberName,
        m.phone,
        p.name AS previousProduct,
        s.productType AS productType,
        latest.price AS amount
        FROM member m
                JOIN (
                    SELECT s1.*
                    FROM subscription s1
                    WHERE s1.endDate = (
                            SELECT MAX(s2.endDate)
                            FROM subscription s2
                            WHERE s2.memberId = s1.memberId
                            )
                    ) latest
                                    ON latest.memberId = m.memberId
                JOIN product p      ON p.productId = latest.productId
                JOIN subscription s ON s.subscriptionId = latest.subscriptionId

        -- üìå Ïò§Îäò Í∏∞Ï§Ä ÎßåÎ£å
        WHERE latest.endDate &lt; CURRENT_DATE

        -- üìå ÌòÑÏû¨ ÌôúÏÑ± Ïù¥Ïö©Í∂åÏù¥ ÏóÜÎäî Í≤ΩÏö∞Îßå
        AND NOT EXISTS (
        SELECT 1 FROM subscription s3
        WHERE s3.memberId = m.memberId
        AND s3.isActive = TRUE
        )

        <if test="keyword != null and keyword != ''">
            AND m.name LIKE CONCAT('%', #{keyword}, '%')
        </if>
        <if test="startDate != null">
            AND latest.endDate &gt;= #{startDate}
        </if>
        <if test="endDate != null">
            AND latest.endDate &lt;= #{endDate}
        </if>

        ORDER BY latest.endDate DESC
    </select>


    <update id="updateStatusActive">
        UPDATE member
        SET status = 'ACTIVE'
        WHERE memberId = #{memberId}
    </update>

    <select id="getMemberStats" resultType="com.example.managesolution.data.dto.MemberStatsDTO">
        SELECT
            count(*) as totalMembers,
            sum(case when m.gender = 'ÎÇ®ÏÑ±' then 1 else 0 end) as totalMale,
            sum(case when m.gender = 'Ïó¨ÏÑ±' then 1 else 0 end) as totalFemale,
            SUM(CASE WHEN m.status = 'INACTIVE' THEN 1 ELSE 0 END) AS expiredMembers,
            SUM(CASE WHEN m.status = 'INACTIVE' AND m.gender = 'ÎÇ®ÏÑ±' THEN 1 ELSE 0 END) AS expiredMale,
            SUM(CASE WHEN m.status = 'INACTIVE' AND m.gender = 'Ïó¨ÏÑ±' THEN 1 ELSE 0 END) AS expiredFemale,
            -- Ïã†Í∑ú ÌöåÏõê (ÏµúÍ∑º 7Ïùº Í∏∞Ï§Ä)
            SUM(CASE WHEN m.created_at >= DATEADD('DAY', -7, CURRENT_DATE) THEN 1 ELSE 0 END) AS newMembers,
            SUM(CASE WHEN m.created_at >= DATEADD('DAY', -7, CURRENT_DATE) AND m.gender = 'ÎÇ®ÏÑ±' THEN 1 ELSE 0 END) AS newMale,
            SUM(CASE WHEN m.created_at >= DATEADD('DAY', -7, CURRENT_DATE) AND m.gender = 'Ïó¨ÏÑ±' THEN 1 ELSE 0 END) AS newFemale,
            (
                SELECT COUNT(*)
                FROM attendance a
                WHERE a.attendedAt >= CURRENT_DATE
                ) AS todayVisitedMembers,
            (
                SELECT COUNT(*)
                FROM attendance a
                         JOIN member m2 ON a.memberId = m2.memberId
                WHERE a.attendedAt >= CURRENT_DATE AND m2.gender = 'ÎÇ®ÏÑ±'
                ) AS todayVisitedMale,
            (
                SELECT COUNT(*)
                FROM attendance a
                         JOIN member m2 ON a.memberId = m2.memberId
                WHERE a.attendedAt >= CURRENT_DATE AND m2.gender = 'Ïó¨ÏÑ±'
                ) AS todayVisitedFemale
        FROM member m

    </select>

</mapper>
